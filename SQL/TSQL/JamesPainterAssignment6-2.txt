-- Student Registration Creation Script
-- James Painter 6/15/2016
-- Comments

USE Master 

IF EXISTS(SELECT * FROM sysdatabases WHERE name ='Painter_FARMS')
DROP DATABASE Painter_FARMS

GO

CREATE DATABASE Painter_FARMS

ON PRIMARY 

(
NAME = 'Painter_FARMS', 
--FILENAME = 'C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\Painter_FARMS.mdf',
FILENAME = 'C:\Stage\Painter_FARMS.mdf',
SIZE = 4MB, 
MAXSIZE = 4MB,
FILEGROWTH= 500KB
)

LOG ON 

(
NAME = 'Painter_FARMS_Log', 
FILENAME = 'C:\Stage\Painter_FARMS.ldf',
SIZE = 4MB, 
MAXSIZE = 4MB, 
FILEGROWTH = 500KB
)
Go

--Create Tables
USE Painter_FARMS

CREATE TABLE GUEST
(
GuestID				smallint	NOT NULL	IDENTITY(1500,1), 
GuestFirstName		varchar(20)	NOT NULL,
GuestLastName		varchar(20)	NOT NULL, 
GuestAddress1		varchar(30)	NOT NULL,
GuestAddress2		varchar(10) NULL, 
GuestCity			varchar(20) NOT NULL, 
GuestState			varchar(2) NULL, 
GuestPostalCode		char(10) NOT NULL, 
GuestCountry		varchar(20) NOT NULL, 
GuestPhone			varchar(20) NOT NULL, 
GuestEmail			varchar(30) NULL,
GuestComments		varchar(200) NULL	
)


CREATE TABLE ROOMTYPE
(
RoomTypeID			smallint NOT NULL	IDENTITY(1,1), 
RTDescription		varchar(200)	NOT NULL,

)


CREATE TABLE TAXRATE
(
TaxLocationID		smallint NOT NULL IDENTITY(1,1), 
TaxDescription		varchar(30) NOT NULL, 
RoomTaxRate			decimal(6,4),
SalesTaxRate		decimal(6,4),
)

CREATE TABLE BILLINGCATEGORY
(
BillingCategoryID		smallint NOT NULL IDENTITY(1,1), 
BillingCatDescription	varchar(30) NOT NULL, 
BillingCatTaxable		bit	NOT NULL
)

CREATE TABLE DISCOUNT
(
DiscountID			smallint NOT NULL IDENTITY(1,1), 
DiscountDescription	varchar(50) NOT NULL, 
DiscountExpiration	date NOT NULL,
DiscountRules		varchar(100) NULL, 
DiscountPercent		decimal(4,2) NULL, 
DiscountAmount		smallmoney NULL
)

CREATE TABLE CREDITCARD
(
CreditCardID		smallint NOT NULL IDENTITY(1,1), 
GuestID				smallint NOT NULL, 
CCTYPE				varchar(5) NOT NULL, 
CCNumber			varchar(16) NOT NULL, 
CCCompany			varchar(40) NULL, 
CCCardHolder		varchar(40) NOT NULL, 
CCExpiration		smalldatetime NOT NULL, 
)

CREATE TABLE RESERVATION
(
ReservationID		smallint NOT NULL IDENTITY(5000,1),
ReservationDate		date	NOT NULL, 
ReservationStatus	char(1) NOT NULL,
ReservationComments	varchar(200) NULL, 
CreditCardID		smallint NOT NULL, 
)

CREATE TABLE FOLIO
(
FolioID				smallint NOT NULL IDENTITY(1,1),
ReservationID		smallint NOT NULL, 
GuestID				smallint NOT NULL, 
RoomID				smallint NOT NULL, 
QuotedRate			smallmoney NOT NULL, 
CheckinDate			smalldatetime NOT NULL, 
Nights				tinyint NOT NULL, 
Status				char(1) NOT NULL, 
Comments			varchar(200) NULL, 
DiscountID			smallint NOT NULL				
)

CREATE TABLE PAYMENT 
(
PaymentID			smallint NOT NULL IDENTITY(8000,1),
FolioID				smallint NOT NULL, 
PaymentDate			date NOT NULL, 
PaymentAmount		smallmoney NOT NULL, 
PaymentComments		varchar(200) NULL
)

CREATE TABLE ROOM 
(
RoomID				 smallint NOT NULL IDENTITY(1,1), 
RoomNumber			 varchar(5) NOT NULL, 
RoomDescription		 varchar(200) NOT NULL, 
RoomSmoking			 bit NOT NULL, 
RoomBedConfiguration char(2) NOT NULL, 
HotelID				 smallint NOT NULL,
RoomTypeID			smallint NOT NULL
)

CREATE TABLE BILLING 
(
FolioBillingID	smallint NOT NULL IDENTITY(1,1),
FolioID					smallint NOT NULL, 
BillingCategoryID		smallint NOT NULL, 
BillingDescription		char(30) NOT NULL, 
BillingAmount			smallmoney NOT NULL, 
BillingItemQty			tinyint NOT NULL, 
BillingItemDate			date NOT NULL
)

CREATE TABLE HOTEL
(
HotelID				smallint NOT NULL, 
HotelName			varchar(30) NOT NULL, 
HotelAddress		varchar(30) NOT NULL, 
HotelCity			varchar(20)	NOT NULL, 
HotelState			varchar(2)	NULL, 
HotelCountry		varchar(20) NOT NULL, 
HotelPostalCode		char(10) NOT NULL, 
HotelStarRating		char(1) NULL, 
HotelPictureLink	varchar(100) NULL, 
TaxLocationID		smallint NOT NULL
)

CREATE TABLE RACKRATE 
(
RackRateID			smallint NOT NULL IDENTITY(1,1), 
RoomTypeID			smallint NOT NULL, 
HotelID				smallint NOT NULL, 
RackRate			smallmoney NOT NULL, 
RackRateBegin		date NOT NULL, 
RackRateEnd			date NOT NULL,
RackRateDescription	varchar(200) NOT NULL 
)
Go

-- Create Primary Keys

ALTER TABLE GUEST
	ADD CONSTRAINT PK_GGuestID
	PRIMARY KEY	(GuestID)

ALTER TABLE ROOMTYPE
	ADD CONSTRAINT PK_RTRoomTypeID
	PRIMARY KEY (RoomTypeID)

ALTER TABLE TAXRATE
	ADD CONSTRAINT PK_TRTaxLocationID
	PRIMARY KEY (TaxLocationID)

ALTER TABLE BILLINGCATEGORY
	ADD CONSTRAINT PK_BCBillingCategoryID
	PRIMARY KEY (BillingCategoryID) 

ALTER TABLE DISCOUNT
	ADD CONSTRAINT PK_DDiscountID
	PRIMARY KEY (DiscountID) 

ALTER TABLE CREDITCARD
	ADD CONSTRAINT PK_CCCreditCardID
	PRIMARY KEY (CreditCardID)

ALTER TABLE RESERVATION
	ADD CONSTRAINT PK_RReservationID
	PRIMARY KEY (ReservationID) 

ALTER TABLE FOLIO
	ADD CONSTRAINT PK_FFolioID
	PRIMARY KEY (FolioID) 

ALTER TABLE PAYMENT 
	ADD CONSTRAINT PK_PPaymentID
	PRIMARY KEY (PaymentID) 

ALTER TABLE ROOM
	ADD CONSTRAINT PK_RRoomID
	PRIMARY KEY (RoomID) 

ALTER TABLE BILLING
	ADD CONSTRAINT PK_BFolioBillingID
	PRIMARY KEY	(FolioBillingID)

ALTER TABLE HOTEL
	ADD CONSTRAINT PK_HHotelID
	PRIMARY KEY	(HotelID) 

ALTER TABLE RACKRATE
	ADD CONSTRAINT PK_RRackRateID
	PRIMARY KEY (RackRateID) 

GO

-- CREATE FOREIGN KEYS 

ALTER TABLE CREDITCARD
ADD
CONSTRAINT FK_CCGuestID
FOREIGN KEY (GuestID) REFERENCES GUEST (GuestID)
ON UPDATE Cascade
ON DELETE Cascade


ALTER TABLE RESERVATION
ADD
CONSTRAINT FK_RCreditCardID
FOREIGN KEY (CreditCardID) REFERENCES CREDITCARD (CreditCardID)
ON UPDATE Cascade
ON DELETE Cascade


ALTER TABLE FOLIO
ADD
CONSTRAINT FK_FReservationID
FOREIGN KEY (ReservationID) REFERENCES RESERVATION (ReservationID) 
ON UPDATE Cascade
ON DELETE Cascade,

CONSTRAINT FK_FRoomID
FOREIGN KEY (RoomID) REFERENCES ROOM (RoomID) 
ON UPDATE Cascade
ON DELETE Cascade,

CONSTRAINT FK_FDiscountID
FOREIGN KEY (DiscountID) REFERENCES DISCOUNT (DiscountID)
ON UPDATE Cascade
ON DELETE Cascade


ALTER TABLE PAYMENT
ADD
CONSTRAINT FK_PFolioID
FOREIGN KEY (FolioID) REFERENCES FOLIO (FolioID)
ON UPDATE Cascade
ON DELETE Cascade


ALTER TABLE ROOM
ADD
CONSTRAINT FK_RHotelID
FOREIGN KEY (HotelID) REFERENCES HOTEL (HotelID)
ON UPDATE Cascade
ON DELETE Cascade,

CONSTRAINT FK_RTRoomID
FOREIGN KEY (RoomTypeID) REFERENCES ROOMTYPE (RoomTypeID) 
ON UPDATE Cascade 
ON DELETE Cascade 



ALTER TABLE BILLING
ADD
CONSTRAINT FK_BFolioID
FOREIGN KEY (FolioID) REFERENCES FOLIO (FolioID)
ON UPDATE Cascade
ON DELETE Cascade,
 

CONSTRAINT FK_BBillingCategoryID
FOREIGN KEY (BillingCategoryID) REFERENCES BILLINGCATEGORY (BillingCategoryID)
ON UPDATE Cascade
ON DELETE Cascade


ALTER TABLE HOTEL
ADD
CONSTRAINT FK_HTaxLocationID
FOREIGN KEY (TaxLocationID)	REFERENCES TAXRATE (TaxLocationID)
ON UPDATE Cascade
ON DELETE Cascade

ALTER TABLE RACKRATE
ADD
CONSTRAINT FK_RRRoomTypeID
FOREIGN KEY (RoomTypeID) REFERENCES ROOMTYPE (RoomTypeID)
ON UPDATE Cascade
ON DELETE Cascade,
 

CONSTRAINT FK_RRHotelID
FOREIGN KEY (HotelID) REFERENCES HOTEL (HotelID) 
ON UPDATE Cascade
ON DELETE Cascade

GO 

-- Check and Balances 

ALTER TABLE RESERVATION
ADD CONSTRAINT CK_RReservationStatus
CHECK(ReservationStatus IN('R','A','B','C','X'))

ALTER TABLE FOLIO
ADD CONSTRAINT CK_FStatus
CHECK(Status IN('R','A','B','C','X'))

ALTER TABLE ROOM
ADD CONSTRAINT CK_RRoomBedConfiguration
CHECK(RoomBedConfiguration IN('K','Q','2Q','2K','2F'))

GO

--BULK INSERT

--SELECT * 
--FROM ROOM

BULK INSERT BILLING FROM 'C:\stage\Billing.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT BILLINGCATEGORY FROM 'C:\stage\BillingCategory.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT CREDITCARD FROM 'C:\stage\CreditCard.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT DISCOUNT FROM 'C:\stage\Discount.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT FOLIO FROM 'C:\stage\Folio.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT GUEST FROM 'C:\stage\Guest.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT HOTEL FROM 'C:\stage\Hotel.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT PAYMENT FROM 'C:\stage\Payment.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT RACKRATE FROM 'C:\stage\RackRate.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT RESERVATION FROM 'C:\stage\Reservation.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT ROOM FROM 'C:\stage\Room.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT ROOMTYPE FROM 'C:\stage\RoomType.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT TAXRATE FROM 'C:\stage\TaxRate.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

GO


--USE Painter_FARMS

--#1
PRINT '#1 Write a stored procedure named sp_InsertGuest that can be used to insert a row of data into the GuestTable.'

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'sp_InsertGuest')
	DROP PROCEDURE sp_InsertGuest
GO 

CREATE PROCEDURE sp_InsertGuest
--variables 
	@GuestFirstName		varchar(20)
	, @GuestLastName	varchar(20)
	, @GuestAddress1	varchar(30) 
	, @GuestAddress2	varchar(10) = NULL 
	, @GuestCity		varchar(20)
	, @GuestState		char(2)  = NULL 
	, @GuestPostalCode	char(10) 
	, @GuestCountry		varchar(20)
	, @GuestPhone		varchar(20) 
	, @GuestEmail		varchar(30) = NULL 
	, @GuestComments	varchar(200) = NULL
	, @GuestID			smallint OUTPUT 
AS
BEGIN
INSERT INTO GUEST(GuestFirstName, GuestLastName, GuestAddress1,GuestAddress2, GuestCity, GuestState, GuestPostalCode, GuestCountry,GuestPhone,GuestEmail,GuestComments)
VALUES(@GuestFirstName,
		@GuestLastName,
		@GuestAddress1, 
		@GuestAddress2,
		@GuestCity, 
		@GuestState, 
		@GuestPostalCode,
		@GuestCountry,
		@GuestPhone,
		@GuestEmail,
		@GuestComments)
SET @GuestID = @@IDENTITY; 
END

 -- 1A 
 GO
 PRINT '1A. Demonstrate this procedure by adding yourself as a new guest, using sp_InsertGuest.'
 DECLARE @NEWGuestID smallint


 EXEC sp_InsertGuest
		@GuestFirstName = 'James', 
		@GuestLastName	= 'Painter', 
		@GuestAddress1  = '3575 Iowa Ave.', 
		@GuestAddress2	= NULL,
		@GuestCity = 'OGDEN',
		@GuestState = 'UT', 
		@GuestPostalCode = '84403',
		@GuestCountry = 'US',
		@GuestPhone = '385-282-9293',
		@GuestEmail = 'JamesPainter@mail.weber.edu',
		@GuestComments = 'Weber State CS 3550 Student', 
		@GuestID = @NEWGuestID OUTPUT; 
GO
--#1B
PRINT '1B.  Select * From Guests to show the results.'
SELECT * FROM GUEST; 

GO


--#2 
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'sp_InsertRoomType')
	DROP PROCEDURE sp_InsertRoomType

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'sp_InsertRackRate')
	DROP PROCEDURE sp_InsertRackRate

GO 


PRINT '#2 Write a stored procedure named sp_InsertRoomType that can be used to insert a row of data into the RoomType table then insert the @@identity of the new room type into the RackRate table. This will require a separate procedure named sp_InsertRackRate'
GO

CREATE PROCEDURE sp_InsertRackRate
--variables
	--@RackRateID				smallint,
	@RoomTypeID				smallint,
	@HotelID				smallint,
	@RackRate				smallmoney, 
	@RackRateBegin			date, 
	@RackRateEnd			date,
	@RackRateDescription	varchar(200)

AS
BEGIN
	INSERT INTO RACKRATE(RoomTypeID,HotelID,RackRate,RackRateBegin,RackRateEnd,RackRateDescription)
		VALUES(@RoomTypeID,
				@HotelID,
				@RackRate, 
				@RackRateBegin, 
				@RackRateEnd,
				@RackRateDescription)
END

GO
CREATE PROCEDURE sp_InsertRoomType
--variables 
	@RTDescription		varchar(200), 
	--@RoomTypeID			smallint OUTPUT, 
	@HotelID				smallint,
	@RackRate				smallmoney, 
	@RackRateBegin			date, 
	@RackRateEnd			date,
	@RackRateDescription	varchar(200)


AS 
BEGIN
		INSERT INTO ROOMTYPE(RTDescription)
			VALUES(@RTDescription);
		
			EXEC sp_InsertRackRate
			 @RoomTypeID = @@IDENTITY, 
			 @HotelID	= @HotelID,
			 @RackRate = @RackRate, 
			 @RackRateBegin = @RackRateBegin, 
			 @RackRateEnd = @RackRateEnd,
			 @RackRateDescription = @RackRateDescription

END

GO

--#2A
PRINT '2A. Demonstrate: Weber Suites is expanding.' 

EXEC sp_InsertRoomType
			
			 @RTDescription = 'MasterSuite',
			 @HotelID	= 2300,
			 @RackRate = 299.00, 
			 @RackRateBegin = '01/06/2016', 
			 @RackRateEnd = '12/31/2016',
			 @RackRateDescription = 'Special Rate for new Master Suites' 

--#2B
PRINT 'Select * From RackRate to show the results.'

SELECT * FROM ROOMTYPE
GO
SELECT * FROM RACKRATE

GO 

--#3 
PRINT 'p_UpdateRackRates that can be used to update prices on the RackRate Table'
GO
IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'p_UpdateRackRates')
	DROP PROCEDURE p_UpdateRackRates

GO

CREATE PROCEDURE p_UpdateRackRates
--variables 
	@HotelID		smallint, 
	@RoomTypeID		smallint = NULL,
--	@RackRate		smallmoney, 
	@BeginDate		varchar(max), 
--	@EndDate		date,
	@RackRateIncrease	decimal(3,2) = NULL,
	@RackRateDecrease decimal(3,2) = NULL 

AS 
BEGIN 
	DECLARE @CheckDate date
	DECLARE @ErrMessage  varchar(max)

	BEGIN TRY
		
		SET @CheckDate = CONVERT(date, @BeginDate)
	END TRY
	BEGIN CATCH
		SET @ErrMessage = ('"' + @BeginDate + '" is not a valid check-in date. Please enter a valid date.')
		RAISERROR (@ErrMessage, -1, -1, @BeginDate)
		RETURN -1
	END CATCH


--iF (SELECT RoomTaxRate From TaxRate Where TaxLocationID = @TaxLocationID) != @RoomTaxChange -- Updated
	--IF(SELECT RackRate FROM RACKRATE WHERE @RoomTypeID = NULL) != @RackRatePercentage
	IF(@RoomTypeID IS NULL)
	BEGIN 
			IF(@RackRateIncrease IS NOT NULL)
			BEGIN
				UPDATE RACKRATE
				SET RackRate = CEILING(RackRate * @RackRateIncrease)
				WHERE HotelID = @HotelID AND (@BeginDate BETWEEN RackRateBegin AND RackRateEnd)
				
				UPDATE RACKRATE
				SET RackRateBegin = GETDATE()
				WHERE HotelID = @HotelID
			END
			ELSE IF(@RackRateDecrease IS NOT NULL)
			BEGIN
				UPDATE RACKRATE
				SET RackRate = FLOOR(RackRate * @RackRateDecrease)
				WHERE HotelID = @HotelID AND (@BeginDate BETWEEN RackRateBegin AND RackRateEnd)

				UPDATE RACKRATE
				SET RackRateBegin = GETDATE()
				WHERE HotelID = @HotelID

			END

	END 
	--ELSE IF(SELECT RoomTypeID FROM RACKRATE WHERE RoomTypeID = @RoomTypeID) != @RoomTypeID
	ELSE IF(@RoomTypeID IS NOT NULL)
	BEGIN 
			IF(@RackRateIncrease IS NOT NULL)
			BEGIN
				UPDATE RACKRATE
				SET RackRate = CEILING(RackRate * @RackRateIncrease)
				WHERE RoomTypeID = @RoomTypeID AND HotelID = @HotelID AND (@BeginDate BETWEEN RackRateBegin AND RackRateEnd)
				
				UPDATE RACKRATE
				SET RackRateBegin = GETDATE()
				WHERE RoomTypeID = @RoomTypeID AND HotelID = @HotelID AND (@BeginDate BETWEEN RackRateBegin AND RackRateEnd)
			END
			ELSE IF(@RackRateDecrease IS NOT NULL)
			BEGIN
				UPDATE RACKRATE
				SET RackRate = FLOOR(RackRate * @RackRateDecrease)
				WHERE RoomTypeID = @RoomTypeID AND HotelID = @HotelID AND (@BeginDate BETWEEN RackRateBegin AND RackRateEnd)
				UPDATE RACKRATE
				SET RackRateBegin = GETDATE()
				WHERE RoomTypeID = @RoomTypeID AND HotelID = @HotelID AND (@BeginDate BETWEEN RackRateBegin AND RackRateEnd)
			END
	END
END

GO 


-- #3A 

PRINT 'Demonstrate: It''s summertime in Park City, and Sunridge B&B wants to decrease rates'

GO

--SELECT* FROM RACKRATE
--SELECT* FROM HOTEL

EXEC p_UpdateRackRates
	@HotelID = 2100, 
	@RoomTypeID	= 1,
	@BeginDate = '2016-05-04', 
	--@RackRateIncrease = 0,
	@RackRateIncrease = NULL,
	@RackRateDecrease = 6.66;
	
 
 GO
 --#3B
 PRINT ' Select * From RackRate to show the results.'
 GO
 Select * From RackRate

 GO
 --#3C
 PRINT 'Demonstrate: Calling the exact same sp_UpdateRackRates, with different parameters only -  increasing 5.55%'
 GO
 EXEC p_UpdateRackRates
	@HotelID = 2300, 
	@RoomTypeID	= 8,
	@BeginDate = '2016-07-01', 
	--@RackRateIncrease = 0,
	@RackRateIncrease = 5.55,
	@RackRateDecrease = NULL;


GO 

--#3D
PRINT 'Select * From RackRate to show the results.' 
GO
Select * From RackRate


GO

--#4 
PRINT ' Write a stored procedure named sp_UpdateFolio that can be used to update the Folio table with the a FolioID as a supplied parameter and (any combination of check-in date, number of nights, and/or status as additional parameters)'
GO

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'sp_UpdateFolio')
	DROP PROCEDURE sp_UpdateFolio
GO
CREATE PROCEDURE sp_UpdateFolio
--Variables go here 
	@FolioID  smallint,
	--@ReservationID	smallint, 
	--@GuestID		smallint, 
	--@RoomID			smallint, 
	--@QuotedRate		smallmoney, 
	@CheckinDate	varchar(max), --smalldatetime,
	@Nights			tinyint, 
	@Status			char(1) 
	--@Comments		varchar(200) = NULL, 
	--@DiscountID		smallint

AS 
BEGIN 

	DECLARE @CheckDate smalldatetime
	DECLARE @ErrMessage  varchar(max)


	IF NOT EXISTS(SELECT FolioID FROM Folio WHERE FolioID = @FolioID)
	BEGIN
		SET @ErrMessage = ('"' + CONVERT(varchar,@FolioID) + '" is not a valid Folio Identification. Please try again.')
		RAISERROR (@ErrMessage, -1, -1, @FolioID)
		RETURN -1
	END
	
	BEGIN TRY
		
	SET @CheckDate = CONVERT(smalldatetime, @CheckinDate)
	END TRY
	BEGIN CATCH
		SET @ErrMessage = ('"' + @CheckinDate + '" is not a valid check-in date. Please enter a valid date.')
		RAISERROR (@ErrMessage, -1, -1, @CheckinDate)
		RETURN -1
	END CATCH

 
	BEGIN TRY 
	IF(@STATUS IS NOT NULL)
	BEGIN
	UPDATE FOLIO 
	SET STATUS = @Status 
	WHERE FolioID = @FolioID 
	END
	END TRY 
	BEGIN CATCH 
	SET @ErrMessage = ('"' + @Status + '" is not a valid Status. Please enter a valid status (R,A,B,C,X) .')
		RAISERROR (@ErrMessage, -1, -1, @Status)
		RETURN -1
	END CATCH


	--check-in dates, nights and/or status, given a folio id
		IF(@CheckinDate IS NOT NULL) 
		BEGIN 
			UPDATE FOLIO 
			SET CheckinDate = @CheckinDate
			WHERE FolioID = @FolioID
		END
		IF (@Nights IS NOT NULL)
		BEGIN
			UPDATE FOLIO
			SET Nights = @Nights
			WHERE FolioId = @FolioId 
		END
		IF(@Status IS NOT NULL)
		BEGIN
			Update FOLIO 
			SET Status = @Status 
			WHERE FolioID = @FolioID 
		END 


END

GO

--4A 
PRINT '#4A FolioID and one parameter - either nights, status, or check-in date only.'
GO
EXEC  sp_UpdateFolio
	@FolioID = 1,
	--@ReservationID	smallint, 
	--@GuestID		smallint, 
	--@RoomID			smallint, 
	--@QuotedRate		smallmoney, 
	@CheckinDate	= NULL, 
	@Nights		=	NULL, 
	@Status		=	'R';

GO
 
--#4B 
PRINT '#4B Demonstrate sp_UpdateFolio again by providing a FolioID and two parameters - either nights, status, or check-in date only'
GO
EXEC  sp_UpdateFolio
	@FolioID = 1,
	--@ReservationID	smallint, 
	--@GuestID		smallint, 
	--@RoomID			smallint, 
	--@QuotedRate		smallmoney, 
	@CheckinDate	= '2016-09-02 00:00:00', 
	@Nights		=	4, 
	@Status		=	NULL;
GO
--#4C
PRINT 'Select * from Folio showing the results of the updates.'
GO
	select * FROM FOLIO 

GO

PRINT 'Demonstrate sp_UpdateFolio a third time - demonstrating the generation of an error.'
GO
EXEC  sp_UpdateFolio
	@FolioID = 1,
	--@ReservationID	smallint, 
	--@GuestID		smallint, 
	--@RoomID			smallint, 
	--@QuotedRate		smallmoney, 
	@CheckinDate	= '2016-09-02 00:00:00', 
	@Nights		=	3, 
	@Status		=	'P';
GO


--#5 
PRINT '#5 Write a stored procedure named sp_GetRackRates '

IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'sp_GetRackRates')
	DROP PROCEDURE sp_GetRackRates

GO 


CREATE PROCEDURE sp_GetRackRates
--Variables 
@HotelID	smallint 

AS 
BEGIN 

DECLARE @ErrMessage		varchar(max)
DECLARE @HotelName		varchar(30)
DECLARE @HotelAddress	varchar(200)
DECLARE @HotelCity			varchar(50)
DECLARE @HotelState			varchar(50)
DECLARE @RoomNumber		varchar(5) 
DECLARE @RTDescription  varchar(200) 
DEClARE @RackRate		smallmoney
DECLARE @RackRateBegin	date
DECLARE @RackRateEnd	date

DECLARE @RoomDescription varchar(200)
DECLARE @RackRateDuration varchar(200)
DECLARE @HOTELID2		varchar(200)


IF NOT EXISTS(SELECT HotelID FROM HOTEL WHERE HotelID = @HotelID)
BEGIN
		SET @ErrMessage = ('"' + CONVERT(varchar,@HotelID) + '" is not a valid reservation. Please try again.')
		RAISERROR (@ErrMessage, -1, -1, @HotelID)
		RETURN -1
END

SELECT @HOTELID2 = CONVERT(varchar(20),h.HotelID),
@HotelName = h.HotelName, 
@HotelAddress = h.HotelAddress, 
@HotelCity = h.HotelCity, 
@HotelState = h.HotelState 
FROM HOTEL h 
JOIN RACKRATE rr 
ON h.HotelID = rr.HotelID
JOIN ROOMTYPE rt 
ON rr.RoomTypeID = rt.RoomTypeID
JOIN ROOM r 
ON rt.RoomTypeID = r.RoomTypeID
WHERE h.HotelID = @HotelID;

PRINT ' '
PRINT ' ' 
PRINT ' ' 
PRINT 'Hotel ID:' + ' ' + @HotelID2 + ' - ' + @HotelName 
PRINT @HotelAddress + ', ' + @HotelCity + ', ' + @HotelState 

PRINT ' ' 
PRINT 'Room Details: ' 

DECLARE RoomDetailCursor CURSOR FOR 
SELECT r.RoomNumber, RTDescription, rr.RackRate, rr.RackRateBegin, rr.RackRateEnd
FROM HOTEL h 
JOIN RACKRATE rr 
ON h.HotelID = rr.HotelID
JOIN ROOMTYPE rt 
ON rr.RoomTypeID = rt.RoomTypeID
JOIN ROOM r 
ON rt.RoomTypeID = r.RoomTypeID
WHERE h.HotelID = @HotelID

OPEN RoomDetailCursor

-- Fetch First Time 
FETCH NEXT FROM RoomDetailCursor
INTO @RoomNumber, @RTDescription, @RackRate, 
@RackRateBegin, @RackRateEnd

	WHILE @@FETCH_STATUS = 0 
	BEGIN 
			PRINT 'Room ' + @RoomNumber + ': ' + @RTDescription
			PRINT 'Rate: ' + FORMAT(@RackRate, '$#,0.00') + ' valid ' + CONCAT(CONVERT(varchar(20),@RackRateBegin),' to ', CONVERT(varchar(20),@RackRateBegin))
			PRINT ' ' 

			FETCH NEXT FROM RoomDetailCursor
			INTO @RoomNumber, @RTDescription, @RackRate, 
			@RackRateBegin, @RackRateEnd
	END
	
	CLOSE RoomDetailCursor
	DEALLOCATE RoomDetailCursor
END 


GO 

EXEC sp_GetRackRates
	@HotelID = 2100;

--GO
-- (at least the name) then loop through all the rooms in the hotel, displaying the room number (not id), room type description (not id), and rack rates for that room, with begin and end dates
--SELECT h.HotelID, h.HotelAddress, h.HotelCity, h.HotelState , h.HotelName, r.RoomNumber, RTDescription, rr.RackRate, rr.RackRateBegin, rr.RackRateEnd
--FROM HOTEL h 
--JOIN RACKRATE rr 
--ON h.HotelID = rr.HotelID
--JOIN ROOMTYPE rt 
--ON rr.RoomTypeID = rt.RoomTypeID
--JOIN ROOM r 
--ON rt.RoomTypeID = r.RoomTypeID
----@RoomDescription ='Room Number: ' + r.RoomNumber + CHAR(13) + CHAR(10) + rt.RTDescription,
----@RackRate = rr.RackRate,
----@RackRateDuration = CONCAT(CONVERT(varchar(20),rr.RackRateBegin),' - ', CONVERT(varchar(20),rr.RackRateEnd))