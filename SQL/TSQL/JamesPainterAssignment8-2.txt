-- Student Registration Creation Script
-- James Painter 7/17/2016
-- Comments

USE Master 

IF EXISTS(SELECT * FROM sysdatabases WHERE name ='Painter_FARMS')
DROP DATABASE Painter_FARMS

GO

CREATE DATABASE Painter_FARMS

ON PRIMARY 

(
NAME = 'Painter_FARMS', 
--FILENAME = 'C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\Painter_FARMS.mdf',
FILENAME = 'C:\Stage\Painter_FARMS.mdf',
SIZE = 4MB, 
MAXSIZE = 4MB,
FILEGROWTH= 500KB
)

LOG ON 

(
NAME = 'Painter_FARMS_Log', 
FILENAME = 'C:\Stage\Painter_FARMS.ldf',
SIZE = 4MB, 
MAXSIZE = 4MB, 
FILEGROWTH = 500KB
)
Go

--Create Tables
USE Painter_FARMS

CREATE TABLE GUEST
(
GuestID				smallint	NOT NULL	IDENTITY(1500,1), 
GuestFirstName		varchar(20)	NOT NULL,
GuestLastName		varchar(20)	NOT NULL, 
GuestAddress1		varchar(30)	NOT NULL,
GuestAddress2		varchar(10) NULL, 
GuestCity			varchar(20) NOT NULL, 
GuestState			varchar(2) NULL, 
GuestPostalCode		char(10) NOT NULL, 
GuestCountry		varchar(20) NOT NULL, 
GuestPhone			varchar(20) NOT NULL, 
GuestEmail			varchar(30) NULL,
GuestComments		varchar(200) NULL	
)


CREATE TABLE ROOMTYPE
(
RoomTypeID			smallint NOT NULL	IDENTITY(1,1), 
RTDescription		varchar(200)	NOT NULL,

)


CREATE TABLE TAXRATE
(
TaxLocationID		smallint NOT NULL IDENTITY(1,1), 
TaxDescription		varchar(30) NOT NULL, 
RoomTaxRate			decimal(6,4),
SalesTaxRate		decimal(6,4),
)

CREATE TABLE BILLINGCATEGORY
(
BillingCategoryID		smallint NOT NULL IDENTITY(1,1), 
BillingCatDescription	varchar(30) NOT NULL, 
BillingCatTaxable		bit	NOT NULL
)

CREATE TABLE DISCOUNT
(
DiscountID			smallint NOT NULL IDENTITY(1,1), 
DiscountDescription	varchar(50) NOT NULL, 
DiscountExpiration	date NOT NULL,
DiscountRules		varchar(100) NULL, 
DiscountPercent		decimal(4,2) NULL, 
DiscountAmount		smallmoney NULL
)

CREATE TABLE CREDITCARD
(
CreditCardID		smallint NOT NULL IDENTITY(1,1), 
GuestID				smallint NOT NULL, 
CCTYPE				varchar(5) NOT NULL, 
CCNumber			varchar(16) NOT NULL, 
CCCompany			varchar(40) NULL, 
CCCardHolder		varchar(40) NOT NULL, 
CCExpiration		smalldatetime NOT NULL, 
)

CREATE TABLE RESERVATION
(
ReservationID		smallint NOT NULL IDENTITY(5000,1),
ReservationDate		date	NOT NULL, 
ReservationStatus	char(1) NOT NULL,
ReservationComments	varchar(200) NULL, 
CreditCardID		smallint NOT NULL, 
)

CREATE TABLE FOLIO
(
FolioID				smallint NOT NULL IDENTITY(1,1),
ReservationID		smallint NOT NULL, 
GuestID				smallint NOT NULL, 
RoomID				smallint NOT NULL, 
QuotedRate			smallmoney NOT NULL, 
CheckinDate			smalldatetime NOT NULL, 
Nights				tinyint NOT NULL, 
Status				char(1) NOT NULL, 
Comments			varchar(200) NULL, 
DiscountID			smallint NOT NULL				
)

CREATE TABLE PAYMENT 
(
PaymentID			smallint NOT NULL IDENTITY(8000,1),
FolioID				smallint NOT NULL, 
PaymentDate			date NOT NULL, 
PaymentAmount		smallmoney NOT NULL, 
PaymentComments		varchar(200) NULL
)

CREATE TABLE ROOM 
(
RoomID				 smallint NOT NULL IDENTITY(1,1), 
RoomNumber			 varchar(5) NOT NULL, 
RoomDescription		 varchar(200) NOT NULL, 
RoomSmoking			 bit NOT NULL, 
RoomBedConfiguration char(2) NOT NULL, 
HotelID				 smallint NOT NULL,
RoomTypeID			smallint NOT NULL
)

CREATE TABLE BILLING 
(
FolioBillingID	smallint NOT NULL IDENTITY(1,1),
FolioID					smallint NOT NULL, 
BillingCategoryID		smallint NOT NULL, 
BillingDescription		char(30) NOT NULL, 
BillingAmount			smallmoney NOT NULL, 
BillingItemQty			tinyint NOT NULL, 
BillingItemDate			date NOT NULL
)

CREATE TABLE HOTEL
(
HotelID				smallint NOT NULL, 
HotelName			varchar(30) NOT NULL, 
HotelAddress		varchar(30) NOT NULL, 
HotelCity			varchar(20)	NOT NULL, 
HotelState			varchar(2)	NULL, 
HotelCountry		varchar(20) NOT NULL, 
HotelPostalCode		char(10) NOT NULL, 
HotelStarRating		char(1) NULL, 
HotelPictureLink	varchar(100) NULL, 
TaxLocationID		smallint NOT NULL
)

CREATE TABLE RACKRATE 
(
RackRateID			smallint NOT NULL IDENTITY(1,1), 
RoomTypeID			smallint NOT NULL, 
HotelID				smallint NOT NULL, 
RackRate			smallmoney NOT NULL, 
RackRateBegin		date NOT NULL, 
RackRateEnd			date NOT NULL,
RackRateDescription	varchar(200) NOT NULL 
)
Go

-- Create Primary Keys

ALTER TABLE GUEST
	ADD CONSTRAINT PK_GGuestID
	PRIMARY KEY	(GuestID)

ALTER TABLE ROOMTYPE
	ADD CONSTRAINT PK_RTRoomTypeID
	PRIMARY KEY (RoomTypeID)

ALTER TABLE TAXRATE
	ADD CONSTRAINT PK_TRTaxLocationID
	PRIMARY KEY (TaxLocationID)

ALTER TABLE BILLINGCATEGORY
	ADD CONSTRAINT PK_BCBillingCategoryID
	PRIMARY KEY (BillingCategoryID) 

ALTER TABLE DISCOUNT
	ADD CONSTRAINT PK_DDiscountID
	PRIMARY KEY (DiscountID) 

ALTER TABLE CREDITCARD
	ADD CONSTRAINT PK_CCCreditCardID
	PRIMARY KEY (CreditCardID)

ALTER TABLE RESERVATION
	ADD CONSTRAINT PK_RReservationID
	PRIMARY KEY (ReservationID) 

ALTER TABLE FOLIO
	ADD CONSTRAINT PK_FFolioID
	PRIMARY KEY (FolioID) 

ALTER TABLE PAYMENT 
	ADD CONSTRAINT PK_PPaymentID
	PRIMARY KEY (PaymentID) 

ALTER TABLE ROOM
	ADD CONSTRAINT PK_RRoomID
	PRIMARY KEY (RoomID) 

ALTER TABLE BILLING
	ADD CONSTRAINT PK_BFolioBillingID
	PRIMARY KEY	(FolioBillingID)

ALTER TABLE HOTEL
	ADD CONSTRAINT PK_HHotelID
	PRIMARY KEY	(HotelID) 

ALTER TABLE RACKRATE
	ADD CONSTRAINT PK_RRackRateID
	PRIMARY KEY (RackRateID) 

GO

-- CREATE FOREIGN KEYS 

ALTER TABLE CREDITCARD
ADD
CONSTRAINT FK_CCGuestID
FOREIGN KEY (GuestID) REFERENCES GUEST (GuestID)
ON UPDATE Cascade
ON DELETE Cascade


ALTER TABLE RESERVATION
ADD
CONSTRAINT FK_RCreditCardID
FOREIGN KEY (CreditCardID) REFERENCES CREDITCARD (CreditCardID)
ON UPDATE Cascade
ON DELETE Cascade


ALTER TABLE FOLIO
ADD
CONSTRAINT FK_FReservationID
FOREIGN KEY (ReservationID) REFERENCES RESERVATION (ReservationID) 
ON UPDATE Cascade
ON DELETE Cascade,

CONSTRAINT FK_FRoomID
FOREIGN KEY (RoomID) REFERENCES ROOM (RoomID) 
ON UPDATE Cascade
ON DELETE Cascade,

CONSTRAINT FK_FDiscountID
FOREIGN KEY (DiscountID) REFERENCES DISCOUNT (DiscountID)
ON UPDATE Cascade
ON DELETE Cascade


ALTER TABLE PAYMENT
ADD
CONSTRAINT FK_PFolioID
FOREIGN KEY (FolioID) REFERENCES FOLIO (FolioID)
ON UPDATE Cascade
ON DELETE Cascade


ALTER TABLE ROOM
ADD
CONSTRAINT FK_RHotelID
FOREIGN KEY (HotelID) REFERENCES HOTEL (HotelID)
ON UPDATE Cascade
ON DELETE Cascade,

CONSTRAINT FK_RTRoomID
FOREIGN KEY (RoomTypeID) REFERENCES ROOMTYPE (RoomTypeID) 
ON UPDATE Cascade 
ON DELETE Cascade 



ALTER TABLE BILLING
ADD
CONSTRAINT FK_BFolioID
FOREIGN KEY (FolioID) REFERENCES FOLIO (FolioID)
ON UPDATE Cascade
ON DELETE Cascade,
 

CONSTRAINT FK_BBillingCategoryID
FOREIGN KEY (BillingCategoryID) REFERENCES BILLINGCATEGORY (BillingCategoryID)
ON UPDATE Cascade
ON DELETE Cascade


ALTER TABLE HOTEL
ADD
CONSTRAINT FK_HTaxLocationID
FOREIGN KEY (TaxLocationID)	REFERENCES TAXRATE (TaxLocationID)
ON UPDATE Cascade
ON DELETE Cascade

ALTER TABLE RACKRATE
ADD
CONSTRAINT FK_RRRoomTypeID
FOREIGN KEY (RoomTypeID) REFERENCES ROOMTYPE (RoomTypeID)
ON UPDATE Cascade
ON DELETE Cascade,
 

CONSTRAINT FK_RRHotelID
FOREIGN KEY (HotelID) REFERENCES HOTEL (HotelID) 
ON UPDATE Cascade
ON DELETE Cascade

GO 

-- Check and Balances 

ALTER TABLE RESERVATION
ADD CONSTRAINT CK_RReservationStatus
CHECK(ReservationStatus IN('R','A','B','C','X'))

ALTER TABLE FOLIO
ADD CONSTRAINT CK_FStatus
CHECK(Status IN('R','A','B','C','X'))

ALTER TABLE ROOM
ADD CONSTRAINT CK_RRoomBedConfiguration
CHECK(RoomBedConfiguration IN('K','Q','2Q','2K','2F'))

GO

--BULK INSERT

--SELECT * 
--FROM ROOM

BULK INSERT BILLING FROM 'C:\stage\Billing.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT BILLINGCATEGORY FROM 'C:\stage\BillingCategory.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT CREDITCARD FROM 'C:\stage\CreditCard.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT DISCOUNT FROM 'C:\stage\Discount.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT FOLIO FROM 'C:\stage\Folio.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT GUEST FROM 'C:\stage\Guest.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT HOTEL FROM 'C:\stage\Hotel.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT PAYMENT FROM 'C:\stage\Payment.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT RACKRATE FROM 'C:\stage\RackRate.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT RESERVATION FROM 'C:\stage\Reservation.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT ROOM FROM 'C:\stage\Room.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT ROOMTYPE FROM 'C:\stage\RoomType.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

BULK INSERT TAXRATE FROM 'C:\stage\TaxRate.txt' WITH (FIELDTERMINATOR='|',FIRSTROW=1)

GO


USE Painter_FARMS

GO
--stored procedure sp_InsertRoomType which calls sp_InsertRackRate (from A6)
CREATE PROCEDURE sp_InsertRackRate
--variables
	--@RackRateID				smallint,
	@RoomTypeID				smallint,
	@HotelID				smallint,
	@RackRate				smallmoney, 
	@RackRateBegin			date, 
	@RackRateEnd			date,
	@RackRateDescription	varchar(200)

AS
BEGIN
	INSERT INTO RACKRATE(RoomTypeID,HotelID,RackRate,RackRateBegin,RackRateEnd,RackRateDescription)
		VALUES(@RoomTypeID,
				@HotelID,
				@RackRate, 
				@RackRateBegin, 
				@RackRateEnd,
				@RackRateDescription)
END

GO
CREATE PROCEDURE sp_InsertRoomType
--variables 
	@RTDescription		varchar(200), 
	--@RoomTypeID			smallint OUTPUT, 
	@HotelID				smallint,
	@RackRate				smallmoney, 
	@RackRateBegin			date, 
	@RackRateEnd			date,
	@RackRateDescription	varchar(200)


AS 
BEGIN
		INSERT INTO ROOMTYPE(RTDescription)
			VALUES(@RTDescription);
		
			EXEC sp_InsertRackRate
			 @RoomTypeID = @@IDENTITY, 
			 @HotelID	= @HotelID,
			 @RackRate = @RackRate, 
			 @RackRateBegin = @RackRateBegin, 
			 @RackRateEnd = @RackRateEnd,
			 @RackRateDescription = @RackRateDescription

END

GO



--the function dbo.GetRackRate  (from A7)
IF OBJECT_ID(N'dbo.GetRackRate', N'FN') IS NOT NULL
DROP FUNCTION dbo.GetRackRate
GO
CREATE FUNCTION dbo.GetRackRate
	(
		@RoomID int,
		@date date 

	)
	RETURNS smallmoney 
	AS
	BEGIN 
		DECLARE @rackrate smallmoney 
		SET @rackrate = 0
		SET @rackrate = (SELECT rr.RackRate 
						 FROM RACKRATE rr 
						 JOIN ROOMTYPE rt 
						 ON rr.RoomTypeID = rt.RoomTypeID
						 JOIN ROOM r 
						 ON rt.RoomTypeID = r.RoomTypeID
						 WHERE r.RoomID = @RoomID 
						 AND (@date BETWEEN rr.RackRateBegin AND rr.RackRateEnd))
	RETURN @rackrate
	END
	
---	SELECT (dbo.GetRackRate(4,GETDATE())) AS [RACKRATE]
--	GO


GO 



--the function dbo.ProduceBill (from A7)
IF EXISTS(SELECT name FROM sys.objects WHERE name = N'dbo.ProduceBill')
DROP FUNCTION dbo.ProduceBill
GO
	


CREATE FUNCTION dbo.ProduceBill(@FolioID int)
	RETURNS @ProduceBill TABLE 
	(	[FolioID] [int] NULL,
		[Name] [varchar](90) NOT NULL, 
		[Address] [varchar](90) NOT NULL, 
		[Phone]	[varchar](90) NOT NULL,
		[RoomNumber] [int] NOT NULL,
		[CheckInDate] [date] NOT NULL,
		
		[FolioBillingID] [int] NOT NULL, 
		[BillingCategoryID] [int] NOT NULL, 
		[BillingDescription] [varchar](200) NOT NULL, 
		[BillingItemDate] [date] NOT NULL, 
		[Total]	  [smallmoney] NULL 

	)
	AS
	BEGIN

INSERT INTO  @ProduceBill	SELECT f.FolioID, g.GuestFirstName + ' ' + g.GuestLastName, ' ' +
		    (g.GuestAddress1 + CHAR(13) + CHAR(10) + g.GuestCity + CASE WHEN g.GuestState IS NOT NULL THEN ', ' + g.GuestState ELSE '' END
	+ ' ' + g.GuestPostalCode + CHAR(13) + CHAR(10) + g.GuestCountry),
	   g.GuestPhone, rm.RoomNumber, f.CheckinDate ,b.FolioBillingID,b.BillingCategoryID, b.BillingDescription, b.BillingItemDate, b.BillingItemQty * b.BillingAmount
	FROM GUEST g
			JOIN CREDITCARD cc 
			ON g.GuestID = cc.GuestID
			JOIN RESERVATION r 
			ON cc.CreditCardID = r.CreditCardID
			JOIN FOLIO f 
			ON r.ReservationID = f.ReservationID
			JOIN ROOM rm 
			ON f.RoomID = rm.RoomID
			JOIN BILLING b 
			ON f.FolioID = b.FolioID
			WHERE f.FolioID = @FolioID
			




	RETURN 
	END
	
	GO
	
	IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'sp_GetBill')
	DROP PROCEDURE sp_GetBill;

	GO
	CREATE PROCEDURE sp_GetBill
	@FolioID int
	AS 
	BEGIN 

	--CUSTOMER
		DECLARE @Name varchar(max) 
		DECLARE @Address varchar(30) 
		DECLARE @RoomNumber varchar(200)
		DECLARE @Phone varchar(200)
		DECLARE @CheckInDate varchar(200)
	
	--BILLING
		
		DECLARE @BillingCategoryID varchar(30)
		DECLARE @BillingDescription varchar(200)
		DECLARE @BillingItemDate varchar(20)
		DECLARE @BillingTotal varchar (10)

		SELECT DISTINCT @Name = Name , @Address = Address , @Phone = Phone, @RoomNumber = RoomNumber , @CheckInDate = CheckInDate  FROM ProduceBill(@FolioID)
		PRINT ' ' 
		PRINT @Name + ', ' + @Phone + ', ' + @CheckInDate + ',' +  @Address + Char(13) + Char(10) + 'Room Number: ' + @RoomNumber 
		PRINT ' ' 

		--DECLARE FolioCursor CURSOR FOR
		--SELECT @BillingCategoryID = BillingCategoryID, @BillingDescription = BillingDescription, @BillingItemDate = BillingItemDate, @BillingTotal = Total
		--FROM ProduceBill(@FolioID)
		--WHERE FolioBillingID > 0 

		DECLARE FolioCursor CURSOR FOR
		SELECT DISTINCT BillingCategoryID, BillingDescription, BillingItemDate, Total
		FROM ProduceBill(@FolioID)
		ORDER BY BillingItemDate, Total
		
		

		OPEN FolioCursor
		
		DECLARE @Fetch_FolioCursor int 
		DECLARE @Fetch_FolioTotal  int
		DECLARE @OverAllTotal smallmoney

		-- FETCH First Time
		FETCH NEXT FROM FolioCursor
		INTO @BillingCategoryID, @BillingDescription , @BillingItemDate , @BillingTotal 
		SET @Fetch_FolioCursor = @@FETCH_STATUS

		WHILE @Fetch_FolioCursor = 0 
		BEGIN 
			PRINT @BillingCategoryID + ' ' + @BillingDescription + ' ' + @BillingItemDate + ' ' + @BillingTotal
			--
			FETCH NEXT FROM FolioCursor
			INTO @BillingCategoryID, @BillingDescription , @BillingItemDate , @BillingTotal 
			SET @Fetch_FolioCursor = @@FETCH_STATUS

		END
		
		
		SELECT @OverAllTotal = SUM(Total)
		FROM ProduceBill(@FolioID)
		

		PRINT ' ' 
		PRINT 'Total: ' + CONVERT(varchar(20), @OverAllTotal)
		PRINT ' ' 
		CLOSE FolioCursor DEALLOCATE FolioCursor
		PRINT ''	

	END
	 
	 GO

--he function dbo.GetRoomTaxRate (from A7)


CREATE FUNCTION dbo.GetRoomTaxRate
	(
		@RoomID int
	)
	RETURNS decimal(6,2)
	AS 
	BEGIN 
		DECLARE @roomtaxrate decimal(6,2)
		SET @roomtaxrate = 0
		SET @roomtaxrate = (SELECT tr.RoomTaxRate 
							FROM TAXRATE tr 
							INNER JOIN HOTEL h
							ON tr.TaxLocationID = h.TaxLocationID
							JOIN ROOM r 
							ON h.HotelID = r.HotelID
							WHERE r.RoomID = @RoomID)
		RETURN @roomtaxrate
							 
	END

GO 




--0A.  Just like you did in A6 (part 2B)

			 EXEC sp_InsertRoomType
			 @RTDescription = 'Dorm Room',
			 @HotelID	= 2400,
			 @RackRate = 35.50, 
			 @RackRateBegin = '01/01/2016', 
			 @RackRateEnd = '12/31/2016',
			 @RackRateDescription = 'Special Grand Opening Rate'

--SELECT * FROM ROOMTYPE
--0B. Select * From RackRate to show the results.  Note the RoomTypeID for later.

SELECT * FROM RACKRATE
GO


--OC 0C.  Write three simple Insert statements to Insert 3 new rooms (Room 101, 102, 103).

INSERT INTO ROOM
VALUES(101,'Standard Dorm Room', 0,'2F',2400, 11)

INSERT INTO ROOM
VALUES(102,'Standard Dorm Room', 0,'2F',2400, 11)

INSERT INTO ROOM
VALUES(103,'Standard Dorm Room', 0,'2F',2400, 11)

--0D.  Select * From Room to show the new rooms.  Note the RoomIDs for later.
SELECT * FROM ROOM
GO

--1.  Write a trigger named tr_GusestDMustExist on the FOLIO table (after INSERT or UPDATE) 


GO

iF EXISTS(SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE SPECIFIC_NAME = 'sp_addmessage')
DROP PROCEDURE sp_addmessage
GO

CREATE PROCEDURE sp_addmess
--VARIABLES 
	@ID int,
	@msgnum int , 
	@severity int , 
	@msgtext varchar(200) 
AS 
BEGIN 
	RAISERROR(@msgtext, @severity,@msgnum, @ID)
	--PRINT @msgtext
	Return -1
END

GO



CREATE TRIGGER tr_GuestIDMustExist ON FOLIO 
AFTER INSERT, UPDATE
AS
--Variables go here
DECLARE @GuestID smallint
--IF, & FROM Inserted i or FROM Deleted d 
IF EXISTS ( SELECT DISTINCT 'Insert @ GuestID'
			FROM inserted i 
			LEFT JOIN RESERVATION r 
			ON i.ReservationID = r.ReservationID
			LEFT JOIN CREDITCARD cc 
			ON r.CreditCardID = cc.CreditCardID
		    LEFT JOIN GUEST g
			ON cc.GuestID = g.GuestID
			WHERE i.GuestID != g.GuestID
			) 
BEGIN 
--SELECT Declared Variable 
SELECT @GuestID = (SELECT GuestID FROM inserted) 
EXEC sp_addmess @GuestID, 60005, 10, 'Error.  Sorry, GuestID %d was not a valid Guest to insert into the Folio table.'-- RAISERROR(60005,10,1,@GuestID)
ROLLBACK

END
GO 
SELECT * FROM RESERVATION
--1A. 
INSERT INTO RESERVATION
VALUES (GETDATE(), 'R',NULL,1)

--1B. 
SELECT DISTINCT @@IDENTITY AS [Last Reservation Inserted] FROM RESERVATION
GO
--1C.

INSERT FOLIO
VALUES(5020, 500, 20, 35.50, '2016-06-24', 3,'R', NULL, 1)


GO
-- 1D
INSERT FOLIO
VALUES(5020, 1500, 20, 35.50, '2016-07-24', 3,'R', NULL, 1)
GO

--1E
SELECT * FROM FOLIO

GO


--#2 Write a trigger named tr_UpdateFolio  that will be invoked when the Folio table 'status' field ONLY (column update) is changed.
	CREATE VIEW vw_Folio 
	AS
	SELECT FolioID, ReservationID, GuestID, RoomID, QuotedRate, CheckinDate, Nights, Status, Comments,DiscountID, CheckoutDate = CheckinDate+Nights + '12:00 PM'
	FROM FOLIO 


GO

CREATE TRIGGER tr_UpdateFolio  ON vw_Folio
INSTEAD OF UPDATE
AS



DECLARE @FolioID smallint  
DECLARE @BillingAmount smallmoney 
DECLARE @CheckoutDateTime datetime
DECLARE @CheckoutTime time 
DECLARE @LodgingTax smallmoney
DECLARE @Status char(1)
SELECT @Status =(SELECT Status FROM inserted)
SELECT @FolioID = (SELECT FolioID FROM inserted)


	IF UPDATE(Status) 
	SELECT @Status 
	FROM inserted i
	WHERE i.Status = 'C'

--IF EXISTS ( SELECT 'Check Status'
--			FROM inserted i 
--			LEFT JOIN BILLING b 
--			ON i.FolioID = b.FolioID
--			WHERE i.Status = 'C'
--			) 

BEGIN 
	

	--SELECT @FolioID = (SELECT FolioID FROM inserted)
	SELECT @CheckoutDatetime = (SELECT CheckoutDate FROM inserted) -- --(SELECT Checkout FROM inserted )--GETDATE()-- (SELECT Checkout FROM inserted )
	 
	SELECT @CheckoutTime = CONVERT(TIME,@CheckoutDatetime)--(SELECT CONVERT(TIME,@CheckoutDatetime) FROM inserted) -- CONVERT(TIME,GETDATE()) --
	
	SELECT @LodgingTax = (SELECT dbo.GetRoomTaxRate(RoomID) FROM inserted)
	--SET @BillingAmount = (SELECT (i.QuotedRate * i.Nights)*(.50 * i.QuotedRate) FROM inserted i)
	--PRINT @BillingAmount
	--INSERT INTO BILLING
	--IF ((SELECT DATEDIFF(day, @CheckoutDatetime, CheckinDate) FROM inserted WHERE FolioID = @FolioID ) = (SELECT Nights FROM FOLIO WHERE FolioID = @FolioID))
	--BEGIN

			IF (@CheckoutTime < '13:00')
			BEGIN 
				SET @BillingAmount = (SELECT (i.QuotedRate * i.Nights) 
									  FROM inserted i)
				
			END
			IF (@CheckoutTime BETWEEN '13:00' AND '16:00')
			BEGIN
				SET @BillingAmount = (SELECT (i.QuotedRate * i.Nights)+(.50 * i.QuotedRate)
									  FROM inserted i)
			END
			IF (@CheckoutTime >'16:00')
			BEGIN
				SET @BillingAmount = (SELECT (i.QuotedRate * i.Nights)+(1.00 * i.QuotedRate)
									  FROM inserted i)
			END
			
			
	--END
	
INSERT INTO BILLING 
VALUES(@FolioID, 1, 'Room', @BillingAmount, 1,GETDATE())



INSERT INTO BILLING 
VALUES(@FolioID, 2, 'Lodging Tax', @LodgingTax, 1,GETDATE())


END 
GO

SELECT * FROM FOLIO
-- #3 Write a trigger named tr_GenerateBill that will be invoked when an entry is INSERTED into the Billing table. If BillngCategoryID is 2
GO
CREATE TRIGGER tr_GenerateBill ON BILLING 
AFTER INSERT
AS 
DECLARE @FOLIOID smallint 
 

 IF EXISTS(SELECT 'dbo.ProduceBill'
			FROM inserted i 
			WHERE i.BillingCategoryID = 2)

BEGIN 
	SELECT @FOLIOID = (SELECT FolioID FROM inserted)
	Exec dbo.sp_GetBill @FOLIOID
	ROLLBACK
	Update FOLIO SET Status = 'C' WHERE FolioID = @FOLIOID 
	
END

GO
--SELECT * FROM vw_Folio
--#4A Assume today is (July 27, 2016 at 2PM)*
UPDATE  vw_Folio SET Status = 'C', CheckoutDate = '7/27/2016 2:00:00 PM'  WHERE FolioID = 25

GO
--#4B Assume today is (July 27, 2016 at 10AM)*
UPDATE  vw_Folio SET Status = 'C', CheckoutDate = '7/27/2016 10:00:00 AM'  WHERE FolioID = 25

GO
--#4C Assume today is (July 27, 2016 at 6PM)*
UPDATE  vw_Folio SET Status = 'C', CheckoutDate =  '7/27/2016 6:00:00 PM'  WHERE FolioID = 25

GO
--#4D. Run a SELECT statement on the Billing Table showing your Triggers worked.
SELECT * FROM BILLING
GO 

--5. Write a trigger called tr_InsertFolio that will automatically insert the Quoted Rack Rate (obtained from dbo.GetRackRate *) into the QuotedRate field (INSTEAD OF the user's input), when an insert (only) is made into the FOLIO table. 
CREATE TRIGGER tr_InsertFolio ON FOLIO
INSTEAD OF INSERT
AS
DECLARE @QuotedRate smallmoney 
DECLARE @RoomId smallint
DECLARE @CheckinDate smalldatetime
	SELECT ' ' 
	FROM inserted i 
	JOIN ROOM rm
	ON i.RoomID = rm.RoomID
	JOIN HOTEL h 
	ON rm.HotelID = h.HotelID

BEGIN 
SELECT @RoomId = (SELECT RoomID FROM inserted)
SELECT @CheckinDate = (Select CheckinDate FROM inserted)
SELECT @QuotedRate = (SELECT dbo.GetRackRate(@RoomId, @CheckinDate))
INSERT INTO FOLIO
VALUES((SELECT i.ReservationID  FROM inserted i), (SELECT i.GuestID  FROM inserted i), (SELECT i.RoomID  FROM inserted i) ,@QuotedRate, (SELECT i.CheckinDate  FROM inserted i), (SELECT i.Nights  FROM inserted i), (SELECT i.Status FROM inserted i), NULL ,(SELECT i.DiscountID  FROM inserted i))

END 
GO
--5A. Demonstrate this trigger by repeating 1D above but go ahead and supply quoted rate of $400.

INSERT FOLIO
VALUES(5020, 1500, 20, 400.00, '2016-07-24', 3,'R', NULL, 1)
GO

--5B:  Select * From Folio to show the system overrode your rate.
SELECT * FROM FOLIO

